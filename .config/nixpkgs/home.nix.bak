{ config, pkgs, ... }:

let
  unstable = import <unstable> {};

  javajdk = pkgs.adoptopenjdk-bin;

  myColima = pkgs.stdenv.mkDerivation rec {
    pname = "colima";
    pversion = "0.1.10";
    name = "${pname}-${pversion}";
    src = pkgs.fetchurl {
      url = "https://github.com/abiosoft/${pname}/archive/refs/tags/v${pversion}.tar.gz";
      sha256 = "sha256:10mlim3r17cq60qlin5j9f332hxs7s29z9vlv2jq7ip4h888lpd6";
    };
    buildInputs = with pkgs; [
      coreutils
      docker-client
      unstable.lima
      kubectl
      openssh
    ];
    installPhase = ''
      mkdir -p "$out/bin"
      install colima "$out/bin/colima"
    '';
  };

in

{
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  home.packages = with pkgs; [
    myColima
    unstable.lima
    asciinema
    bats
    binutils
    bitwarden-cli
    cmake
    circleci-cli
    cracklib
    dia
    docker-client
    docker-compose
    dos2unix
    filebeat7
    fortune
    geckodriver
    git
    git-crypt
    git-lfs
    gh
    graphviz_2_32
    heartbeat7
    pass
    vscode
    ffmpeg-full
    figlet
    lego
    libgit2
    logstash7-oss
    lolcat
    kubernetes-helm
    maven
    minikube
    mitmproxy
    mosh
    rust
    mplayer
    mpv
    nginx
    ninja
    nodejs-12_x
    openssl
    openvpn
    unstable.nodePackages.mermaid-cli
    silver-searcher
    gnutar
    google-cloud-sdk
    inetutils
    imagemagick
    iosevka
    javajdk
    jq
    lynx
    libgit2
    gnupg
    httpie
    htop
    openssh
    openapi-generator-cli
    pandoc
    pkg-config
    plantuml
    powershell
    pre-commit
    python3Packages.black
    python3Packages.poetry
    python3Packages.pyserial
    python3Packages.xkcdpass
#    (python3.withPackages (p: [
#      p.dbus-python
#      p.tkinter
#      p.virtualenv
#    ]))
    rclone
    sl
    socat
    speedtest-cli
    swagger-codegen
    tectonic
    terraform_0_13
    texlive.combined.scheme-medium
    ubuntu_font_family
    umlet
    unstable.fluent-bit
    up
    vscode
    wget
    (yarn.override { nodejs = nodejs-12_x; })
    youtube-dl
  ];

  fonts.fontconfig.enable = true;

  home.sessionVariables = {
    EDITOR = "nvim";
  };
  home.sessionVariablesExtra = ''
    # . "${pkgs.nix}/etc/profile.d/nix.sh"
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
  '';

  programs.direnv = {
    enable = true;
    enableFishIntegration = true;
    enableBashIntegration = true;
  };

  programs.fish = {
    enable = true;
#    shellInit = ''
#    set -g fish_user_paths "/usr/local/opt/sqlite/bin" $fish_user_paths
#
#    eval (bash -c "source ~/.nix-profile/etc/profile.d/nix.sh; echo export NIX_PATH=\"\$NIX_PATH\"; echo export PATH=\"\$PATH\"; echo export NIX_SSL_CERT_FILE=\"\$NIX_SSL_CERT_FILE\"")
#    set -x NIX_PATH $HOME/.nix-defexpr/channels $NIX_PATH
#
#    # The next line updates PATH for the Google Cloud SDK.
#    if [ -f '/Users/jakob/google-cloud-sdk/path.fish.inc' ]; . '/Users/jakob/google-cloud-sdk/path.fish.inc'; end
#
#    set -x NIX_IGNORE_SYMLINK_STORE 1
#
#    set -x LC_ALL de_DE.utf-8
#    set -x LANG de_DE.utf-8
#    '';
  };

  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
  };

  programs.ssh = {
    enable = true;
    extraConfig = ''

Host *.onion
  ProxyCommand ${pkgs.nmap}/bin/ncat --proxy-type socks5 --proxy 127.0.0.1:9050 %h %p
    '';
  };
}
